version: "3.9"
name: ${NETWORK_STACK_NAME}-core

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "5"

x-restart: &default-restart
  restart: unless-stopped

x-resources: &default-resources
  deploy:
    resources:
      limits:
        cpus: "2.0"
        memory: 4g
      reservations:
        memory: 512m

networks:
  frontend: {}
  backend: {}

volumes:
  wazuh_data:
  indexer_data:
  librenms_data:
  mariadb_data:
  pg_data:

services:
  wazuh.manager:
    image: wazuh/wazuh-manager:${WAZUH_VERSION}
    environment: [ "TZ=${TZ}" ]
    ports:
      - "${WAZUH_SYSLOG_TCP}:1514/tcp"
      - "1514:1514/udp"
      - "55000:55000"
    volumes:
      - wazuh_data:/var/ossec/data
      - ../configs/wazuh/rules:/var/ossec/etc/rules/local:ro
    logging: *default-logging
    <<: *default-restart
    <<: *default-resources
    networks: [backend]
    healthcheck:
      test: ["CMD", "ss", "-ltn", "|", "grep", "-q", ":55000"]
      interval: 30s
      timeout: 5s
      retries: 5

  wazuh.indexer:
    image: wazuh/wazuh-indexer:${WAZUH_VERSION}
    environment:
      - discovery.type=single-node
      - TZ=${TZ}
    volumes:
      - indexer_data:/usr/share/wazuh-indexer/data
    logging: *default-logging
    <<: *default-restart
    <<: *default-resources
    networks: [backend]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 5s
      retries: 10

  wazuh.dashboard:
    image: wazuh/wazuh-dashboard:${WAZUH_VERSION}
    environment: [ "TZ=${TZ}" ]
    ports: [ "${WAZUH_DASHBOARD_PORT}:5601" ]
    depends_on:
      wazuh.indexer:
        condition: service_healthy
    logging: *default-logging
    <<: *default-restart
    <<: *default-resources
    networks: [frontend, backend]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:5601/login"]
      interval: 30s
      timeout: 5s
      retries: 10

  librenms:
    image: librenms/librenms:${LIBRENMS_VERSION}
    env_file: ../env/librenms.env
    ports: [ "${LIBRENMS_HTTP_PORT}:80" ]
    volumes:
      - librenms_data:/data
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_started
    logging: *default-logging
    <<: *default-restart
    <<: *default-resources
    networks: [frontend, backend]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost"]
      interval: 30s
      timeout: 5s
      retries: 10

  mariadb:
    image: mariadb:${MARIADB_VERSION}
    env_file: ../env/librenms.env
    command: ["--innodb-buffer-pool-size=512M","--innodb-log-file-size=256M"]
    volumes:
      - mariadb_data:/var/lib/mysql
    logging: *default-logging
    <<: *default-restart
    networks: [backend]
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$$MYSQL_ROOT_PASSWORD | grep -q 'mysqld is alive'"]
      interval: 20s
      timeout: 5s
      retries: 10

  redis:
    image: redis:${REDIS_VERSION}
    command: ["redis-server","--save","","--appendonly","no"]
    logging: *default-logging
    <<: *default-restart
    networks: [backend]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 5s
      retries: 10

  netbox:
    image: netboxcommunity/netbox:${NETBOX_VERSION}
    env_file: ../env/netbox.env
    ports: [ "${NETBOX_HTTP_PORT}:8080" ]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    logging: *default-logging
    <<: *default-restart
    <<: *default-resources
    networks: [frontend, backend]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080"]
      interval: 30s
      timeout: 5s
      retries: 10

  postgres:
    image: postgres:${POSTGRES_VERSION}
    env_file: ../env/netbox.env
    volumes:
      - pg_data:/var/lib/postgresql/data
    logging: *default-logging
    <<: *default-restart
    networks: [backend]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -h 127.0.0.1 -p 5432"]
      interval: 20s
      timeout: 5s
      retries: 10

  oxidized:
    image: oxidized/oxidized:latest
    ports: [ "8888:8888" ]
    volumes:
      - ../configs/oxidized:/home/oxidized/.config/oxidized
    logging: *default-logging
    <<: *default-restart
    networks: [frontend, backend]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8888"]
      interval: 30s
      timeout: 5s
      retries: 10
